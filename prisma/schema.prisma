// generator client {
//   provider = "prisma-client-js"
// }
// datasource db {
//   provider = "postgresql"
//   url      = env("NEXT_PUBLIC_DATABASE_URL")
// }
// model Organization {
//   id                   String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   name                 String
//   usersRelated         UserInOrganization[]
// }
// model OrganizationInvitation {
//   id                   String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   user_email           String
//   organization_id      String
//   verification_token   String
// }
// model UserInOrganization {
//   id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   user_id         String        @db.Uuid
//   organization_id String        @db.Uuid
//   role            String
//   organization    Organization @relation(fields: [organization_id], references: [id], onUpdate: NoAction, map: "fk_user_in_organization_organization_id")
//   user            User         @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "fk_user_in_organization_user_id")
// }
// model Account {
//   id                 String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   userId             String   @db.Uuid
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?
//   user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@unique([provider, providerAccountId])
// }
// model Session {
//   id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   sessionToken String   @unique
//   userId       String   @db.Uuid
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
// model User {
//   id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   organizationsRelated  UserInOrganization[]
// }
// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   @@unique([identifier, token])
// }

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}
model Organization {
  id                   String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                 String
  usersRelated         UserInOrganization[]
}
model OrganizationInvitation {
  id                   String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_email           String
  organization_id      String
  verification_token   String
}
model UserInOrganization {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id         String
  organization_id String        @db.Uuid
  role            String
  organization    Organization @relation(fields: [organization_id], references: [id], onUpdate: NoAction, map: "fk_user_in_organization_organization_id")
  user            User         @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "fk_user_in_organization_user_id")
}
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organizationsRelated  UserInOrganization[]
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}